/**
 * Composant AIInsight simplifi√© sans @emotion/react
 * Avec analyse dynamique selon le type de campagne
 */

import React from 'react';
import { useCampaignContext } from '../../contexts/CampaignContext';
import { useCampaignAnalysis } from '../../hooks/useCampaignAnalysis';
import { LoadingState } from './Loading';

interface AIInsightProps {
  campaignType: string;
  agentType?: 'openai' | 'gemini' | 'manager' | 'stratege' | 'budget' | 'audience' | 'concurrent' | 'predictif';
  title?: string;
}

const AIInsight: React.FC<AIInsightProps> = ({ 
  campaignType, 
  agentType = 'manager',
  title = 'Aper√ßu IA'
}) => {
  const { selectedCampaignId, selectedPeriod } = useCampaignContext();
  const { data: analysisData, isLoading, error } = useCampaignAnalysis(selectedCampaignId || '', selectedPeriod, agentType);
  
  // D√©terminer l'ic√¥ne et la couleur selon le type d'agent
  const getAgentIcon = () => {
    switch (agentType) {
      case 'openai':
        return 'üß†';
      case 'gemini':
        return 'üîç';
      case 'manager':
        return 'üë®‚Äçüíº';
      case 'stratege':
        return 'üìä';
      case 'budget':
        return 'üí∞';
      case 'audience':
        return 'üë•';
      case 'concurrent':
        return 'üèÜ';
      case 'predictif':
        return 'üîÆ';
      default:
        return 'ü§ñ';
    }
  };
  
  const getAgentName = () => {
    switch (agentType) {
      case 'openai':
        return 'OpenAI';
      case 'gemini':
        return 'Gemini';
      case 'manager':
        return 'Manager';
      case 'stratege':
        return 'Strat√®ge';
      case 'budget':
        return 'Budget';
      case 'audience':
        return 'Audience';
      case 'concurrent':
        return 'Concurrent';
      case 'predictif':
        return 'Pr√©dictif';
      default:
        return 'IA';
    }
  };
  
  const getAgentColor = () => {
    switch (agentType) {
      case 'openai':
        return 'bg-green-600';
      case 'gemini':
        return 'bg-blue-600';
      case 'manager':
        return 'bg-purple-600';
      case 'stratege':
        return 'bg-yellow-600';
      case 'budget':
        return 'bg-emerald-600';
      case 'audience':
        return 'bg-pink-600';
      case 'concurrent':
        return 'bg-orange-600';
      case 'predictif':
        return 'bg-indigo-600';
      default:
        return 'bg-gray-600';
    }
  };
  
  if (isLoading) {
    return (
      <div className="bg-[#1e1e1e] rounded-lg p-6 h-full">
        <div className="flex items-center mb-4">
          <div className={`w-8 h-8 rounded-full ${getAgentColor()} flex items-center justify-center mr-2`}>
            {getAgentIcon()}
          </div>
          <h2 className="text-xl font-semibold">{title}</h2>
        </div>
        <LoadingState 
          isLoading={true} 
          type="skeleton" 
          skeletonType="text"
          className="h-4 mb-2 w-full"
        >
          <div></div>
        </LoadingState>
        <LoadingState 
          isLoading={true} 
          type="skeleton" 
          skeletonType="text"
          className="h-4 mb-2 w-3/4"
        >
          <div></div>
        </LoadingState>
        <LoadingState 
          isLoading={true} 
          type="skeleton" 
          skeletonType="text"
          className="h-4 w-5/6"
        >
          <div></div>
        </LoadingState>
      </div>
    );
  }
  
  if (error || !analysisData) {
    return (
      <div className="bg-[#1e1e1e] rounded-lg p-6 h-full">
        <div className="flex items-center mb-4">
          <div className={`w-8 h-8 rounded-full ${getAgentColor()} flex items-center justify-center mr-2`}>
            {getAgentIcon()}
          </div>
          <h2 className="text-xl font-semibold">{title}</h2>
        </div>
        <div className="text-gray-400">Impossible de charger l'analyse IA pour le moment.</div>
      </div>
    );
  }
  
  // G√©n√©rer un insight fictif bas√© sur le type de campagne et d'agent
  const getInsight = () => {
    if (agentType === 'manager') {
      if (campaignType === "PERFORMANCE_MAX") {
        return "Synth√®se : Le taux de conversion a augment√© de 15% au cours des 30 derniers jours, en grande partie gr√¢ce √† la nouvelle strat√©gie cibl√©e. Nous recommandons d'augmenter le budget sur les segments les plus performants et d'optimiser les ench√®res automatiques.";
      } else if (campaignType === "VIDEO") {
        return "Synth√®se : Les vues compl√®tes ont progress√© de 22% ce mois-ci. Les vid√©os de moins de 30 secondes g√©n√®rent un taux d'engagement sup√©rieur de 35% par rapport aux formats plus longs. Recommandation d'investir davantage dans le contenu court.";
      } else {
        return "Synth√®se : Les performances de la campagne montrent une am√©lioration constante. Le co√ªt par acquisition a diminu√© de 12% sur la p√©riode analys√©e. Nous recommandons de maintenir la strat√©gie actuelle.";
      }
    } else if (agentType === 'stratege') {
      return "Analyse des tendances : Les recherches li√©es √† votre secteur ont augment√© de 18% ce trimestre. Les mots-cl√©s 'musique streaming' et 'playlist personnalis√©e' sont en forte hausse. Recommandation d'ajuster votre strat√©gie de contenu pour capitaliser sur ces tendances.";
    } else if (agentType === 'budget') {
      return "Optimisation budg√©taire : R√©allouer 15% du budget des campagnes sous-performantes vers les campagnes √† fort ROAS pourrait augmenter le retour global de 22%. Recommandation de r√©viser la distribution budg√©taire hebdomadaire.";
    } else if (agentType === 'audience') {
      return "Analyse d'audience : Le segment 25-34 ans urbain montre un taux d'engagement 40% sup√©rieur √† la moyenne. Opportunit√© d'expansion vers des segments similaires dans de nouvelles zones g√©ographiques.";
    } else if (agentType === 'concurrent') {
      return "Analyse concurrentielle : Votre part de voix a augment√© de 5% ce mois-ci, mais les concurrents investissent davantage dans les formats vid√©o courts. Recommandation de renforcer votre pr√©sence sur ces formats pour maintenir votre avantage.";
    } else if (agentType === 'predictif') {
      return "Pr√©visions : Selon nos mod√®les, une augmentation de 10% du budget pourrait g√©n√©rer 18% de conversions suppl√©mentaires au cours du prochain trimestre, avec un ROAS stable. Recommandation d'augmenter progressivement les investissements.";
    } else if (agentType === 'openai') {
      return "Analyse d√©taill√©e : Les performances marketing montrent une corr√©lation forte entre le temps de visionnage et le taux de conversion. Les utilisateurs qui regardent plus de 75% de la vid√©o ont 3,2x plus de chances de convertir.";
    } else if (agentType === 'gemini') {
      return "Analyse technique : Les m√©triques d'engagement pr√©sentent une distribution bimodale avec des pics √† 10s et 45s de visionnage. Recommandation de placer les appels √† l'action √† ces moments pr√©cis pour maximiser l'impact.";
    }
    
    return analysisData.analysis || "Aucune analyse disponible pour le moment.";
  };
  
  return (
    <div className="bg-[#1e1e1e] rounded-lg p-6 h-full animate-fadeIn hover:transform hover:translate-y-[-3px] transition-all duration-300 hover:shadow-lg">
      <div className="flex items-center mb-4">
        <div className={`w-8 h-8 rounded-full ${getAgentColor()} flex items-center justify-center mr-2`}>
          {getAgentIcon()}
        </div>
        <h2 className="text-xl font-semibold">{title} - {getAgentName()}</h2>
      </div>
      <p className="text-gray-400">
        {analysisData.analysis || getInsight()}
      </p>
    </div>
  );
};

export default AIInsight;
